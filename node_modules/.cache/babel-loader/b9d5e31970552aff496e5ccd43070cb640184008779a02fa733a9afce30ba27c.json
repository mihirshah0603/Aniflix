{"ast":null,"code":"import { configureStore, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { MY_API_KEY, TMDB_BASE_URL } from \"../utils/constant\";\nconst initialState = {\n  movies: [],\n  generesLoaded: false,\n  genres: []\n};\nexport const getGenres = createAsyncThunk(\"aniflix/genres\", async () => {\n  try {\n    const response = await axios.get(`${TMDB_BASE_URL}/genre/movie/list?api_key=${MY_API_KEY}`);\n    return response.data.genres;\n  } catch (error) {\n    throw error;\n  }\n});\nconst arrayOfMovieData = (array, moviesArray, genres) => {\n  array.forEach(movie => {\n    const moviesGenres = [];\n    movie.genre_ids.forEach(genre => {\n      const name = genres.find(({\n        id\n      }) => id === genre);\n      if (name) moviesGenres.push(name.name);\n    });\n    if (movie.backdrop_path) {\n      moviesArray.push({\n        id: movie.id,\n        name: (movie === null || movie === void 0 ? void 0 : movie.original_name) || movie.original_title,\n        image: movie.backdrop_path,\n        genres: moviesGenres.slice(0, 2)\n      });\n    }\n  });\n};\nconst getMovieData = async (api, genres, paging = false) => {\n  const moviesArray = [];\n  for (let i = 1; moviesArray.length < 80 && i < 10; i++) {\n    try {\n      const response = await axios.get(`${api}${paging ? `&page=${i}` : \"\"}`);\n      arrayOfMovieData(response.data.results, moviesArray, genres);\n    } catch (error) {\n      console.error(\"Error fetching movie data:\", error);\n    }\n  }\n  return moviesArray;\n};\nexport const fetchMovies = createAsyncThunk(\"aniflix/trending\", async ({\n  type\n}, myThunk) => {\n  try {\n    const {\n      aniflix: {\n        genres\n      }\n    } = myThunk.getState();\n    return getMovieData(`${TMDB_BASE_URL}/trending/${type}/week?api_key=${MY_API_KEY}`, genres, true);\n  } catch (error) {\n    throw error;\n  }\n});\nconst AniflixSlice = createSlice({\n  name: \"Aniflix\",\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(getGenres.fulfilled, (state, action) => {\n      state.genres = action.payload;\n      state.generesLoaded = true;\n    });\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\n      state.movies = action.payload;\n    });\n  }\n});\nexport const store = configureStore({\n  reducer: {\n    aniflix: AniflixSlice.reducer\n  }\n});","map":{"version":3,"names":["configureStore","createAsyncThunk","createSlice","axios","MY_API_KEY","TMDB_BASE_URL","initialState","movies","generesLoaded","genres","getGenres","response","get","data","error","arrayOfMovieData","array","moviesArray","forEach","movie","moviesGenres","genre_ids","genre","name","find","id","push","backdrop_path","original_name","original_title","image","slice","getMovieData","api","paging","i","length","results","console","fetchMovies","type","myThunk","aniflix","getState","AniflixSlice","extraReducers","builder","addCase","fulfilled","state","action","payload","store","reducer"],"sources":["C:/Users/MIHIR SHAH/Desktop/College/Projects/Netflix clone/Aniflix-master/src/store/index.js"],"sourcesContent":["import {\n  configureStore,\n  createAsyncThunk,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nimport { MY_API_KEY, TMDB_BASE_URL } from \"../utils/constant\";\n\nconst initialState = {\n  movies: [],\n  generesLoaded: false,\n  genres: [],\n};\n\nexport const getGenres = createAsyncThunk(\"aniflix/genres\", async () => {\n  try {\n    const response = await axios.get(\n      `${TMDB_BASE_URL}/genre/movie/list?api_key=${MY_API_KEY}`\n    );\n    return response.data.genres;\n  } catch (error) {\n    throw error;\n  }\n});\n\nconst arrayOfMovieData = (array, moviesArray, genres) => {\n  array.forEach((movie) => {\n    const moviesGenres = [];\n    movie.genre_ids.forEach((genre) => {\n      const name = genres.find(({ id }) => id === genre);\n      if (name) moviesGenres.push(name.name);\n    });\n    if (movie.backdrop_path) {\n      moviesArray.push({\n        id: movie.id,\n        name: movie?.original_name || movie.original_title,\n        image: movie.backdrop_path,\n        genres: moviesGenres.slice(0, 2),\n      });\n    }\n  });\n};\n\nconst getMovieData = async (api, genres, paging = false) => {\n  const moviesArray = [];\n  for (let i = 1; moviesArray.length < 80 && i < 10; i++) {\n    try {\n      const response = await axios.get(`${api}${paging ? `&page=${i}` : \"\"}`);\n      arrayOfMovieData(response.data.results, moviesArray, genres);\n    } catch (error) {\n      console.error(\"Error fetching movie data:\", error);\n    }\n  }\n  return moviesArray;\n};\n\nexport const fetchMovies = createAsyncThunk(\"aniflix/trending\", async ({ type }, myThunk) => {\n  try {\n    const { aniflix: { genres } } = myThunk.getState();\n    return getMovieData(`${TMDB_BASE_URL}/trending/${type}/week?api_key=${MY_API_KEY}`, genres, true);\n  } catch (error) {\n    throw error;\n  }\n});\n\nconst AniflixSlice = createSlice({\n  name: \"Aniflix\",\n  initialState,\n  extraReducers: (builder) => {\n    builder.addCase(getGenres.fulfilled, (state, action) => {\n      state.genres = action.payload;\n      state.generesLoaded = true;\n    });\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\n      state.movies = action.payload;\n    });\n  },\n});\n\nexport const store = configureStore({\n  reducer: {\n    aniflix: AniflixSlice.reducer,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}